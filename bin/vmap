#!/usr/bin/env ruby

$LOAD_PATH.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'io/console'

require 'icfpc2012'

begin
  require "Win32API"

  def read_char
    # little hack to capture arrow keys
    c = Win32API.new("crtdll", "_getch", [], "L").Call.chr
    if c == "\xE0"
      c = Win32API.new("crtdll", "_getch", [], "L").Call.chr
      case c
      when "H"
        return "U"
      when "P"
        return "D"
      when "K"
        return "L"
      when "M"
        return "R"
      else
        c
      end
    end
    c
  end
rescue LoadError
  def read_char
    system "stty raw -echo"
    STDIN.getc
  ensure
    system "stty -raw echo"
  end
end

def is_valid_input(i)
  i == 'U' || i == 'D' || i == 'L' || i == 'R' || i == 'W' ? true : false
end

def read_map
  input_map = './maps/contest1.map.txt'
  if ARGF.argv != []
    input_map = ARGF.argv[0]
  end

  Icfpc2012::Map.new(File.read(input_map))
end

def print_map(waypoints)
  waypoint = waypoints.last
  waypoint.map.to_s.each_line { |line| puts line }
  puts "score: " + waypoint.map.score.to_s
  path = waypoints.map(&:movement).join
  puts "path: " + path
end

begin
  map = read_map
  all_waypoints = [ Icfpc2012::Waypoint.new(nil, map) ]
  loop do
    print_map(all_waypoints)

    begin
      step = read_char.capitalize
      raise Interrupt if step.chr == "A" || step.chr == "\e"
      if step.chr == "Z"
        all_waypoints.pop
        print_map(all_waypoints)
      end
    end until is_valid_input(step)

    waypoint = all_waypoints.last.step(step)
    all_waypoints << waypoint

    if !waypoint.map.robot.alive?
      puts "You DIED!!!"
      print_map(all_waypoints)
      break
    end

    if waypoint.map.won?
      puts "We have a WINNER!!!"
      print_map(all_waypoints)
      break
    end

    puts step

  end
rescue Interrupt
  puts 'Quitting...'
  exit 1
end
